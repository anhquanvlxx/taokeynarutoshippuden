<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bảng Quản Trị Key</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Orbitron', sans-serif; background: #0d0d0d; color: #e0e0e0; padding: 2rem; }
        .container { max-width: 900px; margin: auto; background: #1a1a1a; padding: 2rem; border-radius: 1rem; box-shadow: 0 0 20px rgba(255, 0, 0, 0.3); }
        .input-field { width: 100%; padding: 0.75rem; margin-bottom: 1rem; border-radius: 0.5rem; background: #282828; border: 1px solid #333; color: white; }
        .btn-primary { background: linear-gradient(135deg, #ff0000, #b30000); color: white; padding: 0.75rem; border-radius: 0.5rem; font-weight: bold; transition: background 0.3s; }
        .btn-primary:hover { background: linear-gradient(135deg, #ff3333, #e60000); }
        .btn-delete { background-color: #dc2626; color: white; padding: 0.5rem 1rem; border-radius: 0.5rem; font-weight: bold; transition: background 0.3s; }
        .btn-delete:hover { background-color: #b91c1c; }
        table { width: 100%; border-collapse: collapse; margin-top: 1rem; }
        th, td { border: 1px solid #333; padding: 0.75rem; text-align: left; }
        th { background: #282828; }
        tr:nth-child(even) { background-color: #1f1f1f; }
        .input-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; }
        @media (max-width: 768px) {
            .input-grid { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-3xl font-bold text-center mb-6 text-red-400">BẢNG QUẢN TRỊ KEY</h1>

        <div class="bg-gray-800 p-6 rounded-lg mb-6">
            <h2 class="text-xl font-bold mb-4">Tạo Key Mới</h2>
            <div class="input-grid">
                <div>
                    <label for="key-prefix" class="block text-sm font-medium text-gray-400 mb-1">Tiền tố Key:</label>
                    <input type="text" id="key-prefix" class="input-field" value="NARUTO-" placeholder="VD: NARUTO-">
                </div>
                <div>
                    <label for="expiry-time" class="block text-sm font-medium text-gray-400 mb-1">Thời gian sử dụng (ngày):</label>
                    <input type="number" id="expiry-time" class="input-field" value="7" min="1">
                </div>
                <div>
                    <label for="max-devices" class="block text-sm font-medium text-gray-400 mb-1">Số thiết bị dùng:</label>
                    <input type="number" id="max-devices" class="input-field" value="1" min="1">
                </div>
            </div>
            <button id="generate-key-btn" class="btn-primary w-full mt-4">Tạo Key</button>
            <p id="status-message" class="text-center mt-2 text-sm"></p>
        </div>

        <div class="bg-gray-800 p-6 rounded-lg">
            <h2 class="text-xl font-bold mb-4">Danh sách Key</h2>
            <table class="text-sm">
                <thead>
                    <tr>
                        <th class="w-1/3">Key</th>
                        <th>Trạng thái</th>
                        <th>UID Thiết bị</th>
                        <th>Số thiết bị dùng</th>
                        <th>Lần dùng gần đây nhất</th>
                        <th>Thời gian hết hạn</th>
                        <th>Thao tác</th>
                    </tr>
                </thead>
                <tbody id="keys-table-body">
                </tbody>
            </table>
        </div>
    </div>

    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"></script>
    <script>
        // CẤU HÌNH FIREBASE CỦA BẠN
        const firebaseConfig = {
          apiKey: "AIzaSyBKGCVdZxmyw6VN0b7aYRQnCqpqfWwASXU",
          authDomain: "lllllk-20ede.firebaseapp.com",
          databaseURL: "https://lllllk-20ede-default-rtdb.firebaseio.com",
          projectId: "lllllk-20ede",
          storageBucket: "lllllk-20ede.firebasestorage.app",
          messagingSenderId: "314220235218",
          appId: "1:314220235218:web:679c9a246c314b535f200b",
          measurementId: "G-DM08514Z1N"
        };
        firebase.initializeApp(firebaseConfig);

        const database = firebase.database();
        const validKeysRef = database.ref('validKeys');

        function generateUniqueKey(prefix) {
            return prefix + Math.random().toString(36).substr(2, 8).toUpperCase();
        }

        function createKey() {
            const prefix = document.getElementById('key-prefix').value.trim();
            const expiryDays = parseInt(document.getElementById('expiry-time').value, 10);
            const maxDevices = parseInt(document.getElementById('max-devices').value, 10);
            const statusMessage = document.getElementById('status-message');

            if (isNaN(expiryDays) || expiryDays <= 0) {
                statusMessage.textContent = 'Vui lòng nhập thời gian hợp lệ.';
                statusMessage.className = 'text-center mt-2 text-sm text-red-500';
                return;
            }
            if (isNaN(maxDevices) || maxDevices <= 0) {
                statusMessage.textContent = 'Vui lòng nhập số thiết bị hợp lệ.';
                statusMessage.className = 'text-center mt-2 text-sm text-red-500';
                return;
            }

            const newKey = generateUniqueKey(prefix);
            const expiryTime = Date.now() + expiryDays * 24 * 60 * 60 * 1000;
            
            const keyData = { 
                expiry: expiryTime, 
                max_devices: maxDevices,
                devices: {} 
            };

            validKeysRef.child(newKey).set(keyData)
                .then(() => {
                    statusMessage.textContent = `Tạo key thành công: ${newKey}`;
                    statusMessage.className = 'text-center mt-2 text-sm text-green-500';
                })
                .catch(error => {
                    statusMessage.textContent = 'Lỗi khi tạo key: ' + error.message;
                    statusMessage.className = 'text-center mt-2 text-sm text-red-500';
                });
        }

        window.deleteKey = function(key) {
            if (confirm(`Bạn có chắc chắn muốn xóa key "${key}"?`)) {
                validKeysRef.child(key).remove()
                    .then(() => { console.log(`Key ${key} đã được xóa.`); })
                    .catch(error => { console.error("Lỗi khi xóa key: ", error); });
            }
        }

        function renderKeysTable(keys) {
            const tableBody = document.getElementById('keys-table-body');
            tableBody.innerHTML = '';
            Object.keys(keys).forEach(key => {
                const keyData = keys[key];
                const row = document.createElement('tr');
                const now = Date.now();
                const deviceCount = keyData.devices ? Object.keys(keyData.devices).length : 0;
                
                const hasDevices = deviceCount > 0;
                const statusText = keyData.expiry < now ? 'Đã hết hạn' : (hasDevices ? 'Đã sử dụng' : 'Chưa sử dụng');
                const statusClass = keyData.expiry < now ? 'text-red-400' : (hasDevices ? 'text-yellow-400' : 'text-green-400');
                
                let lastUsedTime = 'N/A';
                if (hasDevices) {
                    const deviceUids = Object.keys(keyData.devices);
                    const lastUsedTimestamps = deviceUids.map(uid => keyData.devices[uid].lastUsed);
                    const latestTimestamp = Math.max(...lastUsedTimestamps);
                    lastUsedTime = new Date(latestTimestamp).toLocaleString('vi-VN');
                }

                const deviceUidsString = hasDevices ? Object.keys(keyData.devices).join(', ') : 'N/A';

                row.innerHTML = `
                    <td>${key}</td>
                    <td class="${statusClass}">${statusText}</td>
                    <td>${deviceUidsString}</td>
                    <td>${deviceCount} / ${keyData.max_devices || '∞'}</td>
                    <td>${lastUsedTime}</td>
                    <td>${new Date(keyData.expiry).toLocaleString('vi-VN')}</td>
                    <td><button class="btn-delete" onclick="deleteKey('${key}')">Xóa</button></td>
                `;
                tableBody.appendChild(row);
            });
        }

        document.getElementById('generate-key-btn').addEventListener('click', createKey);
        validKeysRef.on('value', snapshot => {
            const keys = snapshot.val() || {};
            renderKeysTable(keys);
        });
    </script>
</body>
</html>
